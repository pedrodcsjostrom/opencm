basePath: /
definitions:
  errors.APIError:
    properties:
      code:
        type: string
      details: {}
      message:
        type: string
      status:
        type: integer
    type: object
  handlers.assignRoleRequest:
    properties:
      role_id:
        type: string
      user_id:
        type: string
    type: object
  handlers.createProjectRequest:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  handlers.createUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  handlers.loginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  project.Project:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      id:
        type: string
      idea_queue:
        items:
          type: string
        type: array
      name:
        type: string
      post_queue:
        items:
          type: string
        type: array
      updated_at:
        type: string
    type: object
  session.Session:
    properties:
      createdAt:
        type: string
      deviceFingerprint:
        type: string
      expiresAt:
        type: string
      id:
        type: string
      updatedAt:
        type: string
      userID:
        type: string
    type: object
  user.AppRole:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  user.LoginResponse:
    properties:
      session:
        $ref: '#/definitions/session.Session'
      user:
        $ref: '#/definitions/user.UserResponse'
    type: object
  user.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      roles:
        items:
          $ref: '#/definitions/user.AppRole'
        type: array
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is the API server for OpenCM
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: OpenCM API
  version: "1.0"
paths:
  /projects:
    get:
      consumes:
      - application/json
      description: List all projects that the user is a member of
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/project.Project'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.APIError'
      security:
      - ApiKeyAuth: []
      summary: List all projects
      tags:
      - projects
    post:
      consumes:
      - application/json
      description: Create a new project with the given name and description
      parameters:
      - description: Project creation request
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/handlers.createProjectRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/project.Project'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/errors.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.APIError'
        "409":
          description: Project already exists
          schema:
            $ref: '#/definitions/errors.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.APIError'
      security:
      - ApiKeyAuth: []
      summary: Create a new project
      tags:
      - projects
  /projects/{project_id}:
    get:
      consumes:
      - application/json
      description: Get a project by its ID
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/project.Project'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/errors.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.APIError'
        "410":
          description: Project not found
          schema:
            $ref: '#/definitions/errors.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.APIError'
      security:
      - ApiKeyAuth: []
      summary: Get a project
      tags:
      - projects
  /projects/{project_id}/add:
    post:
      consumes:
      - application/json
      description: Add a user to a project by their email
      parameters:
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No content
          schema:
            type: string
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/errors.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.APIError'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/errors.APIError'
        "410":
          description: Project not found
          schema:
            $ref: '#/definitions/errors.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.APIError'
      security:
      - ApiKeyAuth: []
      summary: Add a user to a project
      tags:
      - projects
  /users:
    post:
      consumes:
      - application/json
      description: Register a new user with username, password and email
      parameters:
      - description: User creation request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.createUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.UserResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/errors.APIError'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/errors.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.APIError'
      summary: Register a new user
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Login with email and password
      parameters:
      - description: Login request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.LoginResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/errors.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.APIError'
      summary: Login
      tags:
      - users
  /users/logout:
    post:
      description: Logout the currently authenticated user
      responses:
        "200":
          description: OK
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.APIError'
      security:
      - ApiKeyAuth: []
      summary: Logout
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: Get information about the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.APIError'
      security:
      - ApiKeyAuth: []
      summary: Get user information
      tags:
      - users
  /users/roles:
    delete:
      consumes:
      - application/json
      description: Remove an application role from a user
      parameters:
      - description: Remove role request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.assignRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/errors.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.APIError'
      security:
      - ApiKeyAuth: []
      summary: Remove role from user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get all application roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/user.AppRole'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.APIError'
      security:
      - ApiKeyAuth: []
      summary: Get all roles
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Assign an application role to a user
      parameters:
      - description: Assign role request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.assignRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/errors.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errors.APIError'
      security:
      - ApiKeyAuth: []
      summary: Assign role to user
      tags:
      - users
schemes:
- http
- https
swagger: "2.0"
