// Code generated by mockery v2.43.2. DO NOT EDIT.

package project

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// AddUserToProject provides a mock function with given fields: ctx, projectID, email
func (_m *MockService) AddUserToProject(ctx context.Context, projectID string, email string) error {
	ret := _m.Called(ctx, projectID, email)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateProject provides a mock function with given fields: ctx, name, description
func (_m *MockService) CreateProject(ctx context.Context, name string, description string) (*Project, error) {
	ret := _m.Called(ctx, name, description)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 *Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*Project, error)); ok {
		return rf(ctx, name, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *Project); ok {
		r0 = rf(ctx, name, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableSocialPlatform provides a mock function with given fields: ctx, projectID, socialPlatformID
func (_m *MockService) EnableSocialPlatform(ctx context.Context, projectID string, socialPlatformID string) error {
	ret := _m.Called(ctx, projectID, socialPlatformID)

	if len(ret) == 0 {
		panic("no return value specified for EnableSocialPlatform")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, socialPlatformID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindActiveProjectsChunk provides a mock function with given fields: ctx, offset, chunkSize
func (_m *MockService) FindActiveProjectsChunk(ctx context.Context, offset int, chunkSize int) ([]*Project, error) {
	ret := _m.Called(ctx, offset, chunkSize)

	if len(ret) == 0 {
		panic("no return value specified for FindActiveProjectsChunk")
	}

	var r0 []*Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*Project, error)); ok {
		return rf(ctx, offset, chunkSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*Project); ok {
		r0 = rf(ctx, offset, chunkSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, offset, chunkSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneReadyPostInQueue provides a mock function with given fields: ctx, projectID
func (_m *MockService) FindOneReadyPostInQueue(ctx context.Context, projectID string) (string, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for FindOneReadyPostInQueue")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, projectID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnabledSocialPlatforms provides a mock function with given fields: ctx, projectID
func (_m *MockService) GetEnabledSocialPlatforms(ctx context.Context, projectID string) ([]*SocialPlatform, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetEnabledSocialPlatforms")
	}

	var r0 []*SocialPlatform
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*SocialPlatform, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*SocialPlatform); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*SocialPlatform)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProject provides a mock function with given fields: ctx, projectID
func (_m *MockService) GetProject(ctx context.Context, projectID string) (*ProjectResponse, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 *ProjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ProjectResponse, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ProjectResponse); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ProjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRoles provides a mock function with given fields: ctx, userID, projectID
func (_m *MockService) GetUserRoles(ctx context.Context, userID string, projectID string) ([]string, error) {
	ret := _m.Called(ctx, userID, projectID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoles")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]string, error)); ok {
		return rf(ctx, userID, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []string); ok {
		r0 = rf(ctx, userID, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: ctx
func (_m *MockService) ListProjects(ctx context.Context) ([]*Project, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListProjects")
	}

	var r0 []*Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*Project, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*Project); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
